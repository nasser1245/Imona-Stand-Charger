import tkinter as tk
#from tkinter import Button
import arabic_reshaper
from bidi.algorithm import get_display
from pyfingerprint.pyfingerprint import PyFingerprint
from Shelf import ShelfManager
import time
shelf = ShelfManager()
fnt = "XB Shiraz"
ANDROID = "1"
IPHONE = "2"
TYPE_C = "3"
NOKIA  = "4"

class mainWindow:
	def __init__(self, master):
		self.master = master
		self.frame = tk.Frame(self.master)
		# ~ self.button1 = tk.Button(self.frame, text = 'New Window', width = 25, command = self.new_window)
		# ~ self.button1.pack()
		master.configure(background='#3F2AB1')
		master.title("Charger V0.1")
		master.attributes("-fullscreen",True)
		self.frame.configure(background='#3F2AB1')
		
		bidi_text = get_display(arabic_reshaper.reshape(u'شارژ گوشی'))
		self.socketButton = tk.Button(self.frame,text=bidi_text, command=self.showSocket)
		self.socketButton.configure(background = '#32AF3E',  font = (fnt,40))
		self.socketButton.pack()
		
		bidi_text = get_display(arabic_reshaper.reshape(u'دریافت گوشی'))
		self.socketButton = tk.Button(self.frame,text=bidi_text, command=self.showSocket)
		self.socketButton.configure(background = '#AF323E',  font = (fnt,40))
		self.socketButton.pack()
		
		self.frame.pack()
		master.bind("<F11>", self.toggle_fullscreen)
		master.bind("<Escape>", self.end_fullscreen)
		self.master.attributes("-fullscreen", True)
		
	def toggle_fullscreen(self, event=None):
		self.state = not self.state  # Just toggling the boolean
		self.master.attributes("-fullscreen", self.state)
		return "break"

	def end_fullscreen(self, event=None):
		self.state = False
		self.master.attributes("-fullscreen", False)
		return "break"
		
	def showSocket(self):
		self.socket = tk.Toplevel(self.master)
		self.app = socketWindow(self.socket)



class socketWindow:
	def __init__(self, master):
		self.master = master
		self.shelfNum = None
		self.frame = tk.Frame(self.master)
		bidi_text = get_display(arabic_reshaper.reshape(u'لطفا نوع گوشی خود را مشخص کنید'))
		self.sText = tk.Label(self.frame, text= bidi_text, font = (fnt,25))
		self.sText.pack()
		
		bidi_text = get_display(arabic_reshaper.reshape(u'اندروید'))
		self.androidButton = tk.Button(self.frame,text=bidi_text, command= lambda:self.getSocket(ANDROID))
		self.androidButton.configure(background = '#A2AF3E',  font = (fnt,40))
		self.androidButton.pack()
		
		bidi_text = get_display(arabic_reshaper.reshape(u'آیفون'))
		self.iphoneButton = tk.Button(self.frame,text=bidi_text, command= lambda:self.getSocket(IPHONE))
		self.iphoneButton.configure(background = '#A2AF3E',  font = (fnt,40))
		self.iphoneButton.pack()

		bidi_text = get_display(arabic_reshaper.reshape(u'تایپ سی'))
		self.type_cButton = tk.Button(self.frame,text=bidi_text, command= lambda:self.getSocket(TYPE_C))
		self.type_cButton.configure(background = '#A2AF3E',  font = (fnt,40))
		self.type_cButton.pack()

		bidi_text = get_display(arabic_reshaper.reshape(u'نوکیا'))
		self.nokiaButton = tk.Button(self.frame,text=bidi_text, command= lambda:self.getSocket(NOKIA))
		self.nokiaButton.configure(background = '#A2AF3E',  font = (fnt,40))
		self.nokiaButton.pack()

		
		self.frame.pack()
		self.master.attributes("-fullscreen", True)
		master.bind("<F11>", self.toggle_fullscreen)
		master.bind("<Escape>", self.end_fullscreen)
		
	def toggle_fullscreen(self, event=None):
		self.state = not self.state  # Just toggling the boolean
		self.master.attributes("-fullscreen", self.state)
		return "break"

	def end_fullscreen(self, event=None):
		self.state = False
		self.master.attributes("-fullscreen", False)
		return "break"
		
	def close_windows(self):
		self.master.destroy()
		
	def getSocket(self,socketType):
		self.shelfNum = shelf.allocateShelf(socketType)
		print (self.shelfNum)
		if not (self.shelfNum is None):
			self.finger = tk.Toplevel(self.master)
			self.app = fingerWindow(self.finger,self.shelfNum, socketType,"SET",self.master)
		else:
			self.message = tk.Toplevel(self.master)
			self.app = messageWindow(u'متاسفانه در حال حاضر هیچ قفسه ای برای سوکت شما خالی نیست', self.message,self.master)

class messageWindow:
	def __init__(self, message, master, destroyWindow= None):
		self.master = master
		self.destroyWindow = destroyWindow
		self.frame = tk.Frame(self.master)
		bidi_text = get_display(arabic_reshaper.reshape(message))
		self.sText = tk.Label(self.frame, text= bidi_text, font = (fnt,25))
		self.sText.pack()
		self.frame.pack()
		self.master.attributes("-fullscreen", True)
		root.after(3500, self.exitMessage)
		
	def toggle_fullscreen(self, event=None):
		self.state = not self.state  # Just toggling the boolean
		self.master.attributes("-fullscreen", self.state)
		return "break"

	def end_fullscreen(self, event=None):
		self.state = False
		self.master.attributes("-fullscreen", False)
		return "break"
		
	def exitMessage(self):
		if not (self.destroyWindow is None):
			self.destroyWindow.destroy()
		self.master.destroy()

class fingerWindow:
	def __init__(self, master, shelfNum, socketType, operation="SET", destroyWindow = None):
		self.shelfNum = shelfNum
		self.socketType = socketType
		self.destroyWindow = destroyWindow
		self.master = master
		self.frame = tk.Frame(self.master)
		self.bidi_text = tk.StringVar()
		self.sText = tk.Label(self.frame, textvariable= self.bidi_text, font = (fnt,25))
		self.sText.pack()
		self.frame.pack()
		
		self.master.attributes("-fullscreen", True)
		master.bind("<F11>", self.toggle_fullscreen)
		master.bind("<Escape>", self.end_fullscreen)
		
		if operation == "SET":
			self.frame.update()
			root.after(1,self.setFinger)
		elif operation == "GET":
			getFinger()
				
	def toggle_fullscreen(self, event=None):
		self.state = not self.state  # Just toggling the boolean
		self.master.attributes("-fullscreen", self.state)
		return "break"

	def end_fullscreen(self, event=None):
		self.state = False
		self.master.attributes("-fullscreen", False)
		return "break"
		
	def getFinger(self):
		print ("1")
		
	def setFinger(self):
		i = 0
		ps = False
		while i<3 and ps != True:
			i +=1
			self.bidi_text.set(get_display(arabic_reshaper.reshape(u'لطفا انگشت خود را روی حسگر قرار دهید')))
			self.frame.update()
			time.sleep(1)
			while (finger.readImage() == False):
				pass
			finger.convertImage(0x01)
			
			result = finger.searchTemplate()
			positionNumber = result[0]
			if (positionNumber >= 0):
				self.bidi_text.set(get_display(arabic_reshaper.reshape(u'این اثر انگشت در سیستم وجود دارد. درصورتی که مایل به دریافت گوشی خود هستید از گزینه  "دریافت گوشی" استفاده کنید')))
				self.frame.update()
				time.sleep(5)
				break
			else:
				self.bidi_text.set(get_display(arabic_reshaper.reshape(u'انگشت خود را بردارید')))
				self.frame.update()
				time.sleep(2)
				self.bidi_text.set(get_display(arabic_reshaper.reshape(u'جهت حفظ موارد امنیتی مجددا همان انگشت را روی حسگر قرار دهید ')))
				self.frame.update()
				
				while (finger.readImage() == False):
					pass
				finger.convertImage(0x02)
				time.sleep(1)
				if ( finger.compareCharacteristics() == 0 ):
					self.bidi_text.set(get_display(arabic_reshaper.reshape(u'عدم تطابق اثر انگشت ها')))
					self.frame.update()
					time.sleep(2.5)
					continue

				else:
					ps = True
					finger.createTemplate()	
					#print(sel)
		# uncomment this line at end			positionNumber = finger.storeTemplate(int(self.shelfNum))
					positionNumber = int(self.shelfNum)
					if positionNumber != int(self.shelfNum):
						self.bidi_text.set(get_display(arabic_reshaper.reshape(u'خطا در تکمیل عملیات')))
						self.frame.update()
						time.sleep(2)
						break
					else:
			# ~ shelf allocation
						self.bidi_text.set(get_display(arabic_reshaper.reshape(u'اثر انگشت شما با موفقیت ثبت شد')))
						self.frame.update()
						time.sleep(2)
						direction = ""
						if int(self.socketType) == 1:
							direction = u'چپ'
						else:
							direction = u'راست'
						self.bidi_text.set(get_display(arabic_reshaper.reshape(u'لطفا گوشی خود را به سوکت سمت ' +direction + u' صندوق شماره ' + str(self.shelfNum) + u' متصل نموده و آن را داخل صندوق قرار دهید')))
						self.frame.update()
						time.sleep(8)
				# ~ connectivity check here
				# ~ proximity sensor check here
				# ~ if all things goes right
					
					self.success = shelf.write( self.shelfNum, self.socketType, fingerID, picture)
					
					if self.success == 1:
						self.bidi_text.set(get_display(arabic_reshaper.reshape(u'کاربر گرامی، گوشی شما در امنیت شارژ می شود! می توانید با گزینه دریافت گوشی، آن را تحویل بگیرید')))
						self.frame.update()
						time.sleep(7)
						break
				# update config.json
					else:
						self.bidi_text.set(get_display(arabic_reshaper.reshape(u'مشکل در عملیات تحویل و شارژ گوشی')))
						self.frame.update()
						time.sleep(3)
						break
		self.exitFinger()		
			
	def exitFinger(self):
		print("yess")
		if not (self.destroyWindow is None):
			self.destroyWindow.destroy()
		self.master.destroy()
			
if __name__ == '__main__':
	try:
		finger = PyFingerprint('/dev/ttyS1', 57600, 0xFFFFFFFF, 0x00000000)

		if ( finger.verifyPassword() == False ):
			raise ValueError('The given fingerprint sensor password is wrong!')

	except Exception as e:
		print('The fingerprint sensor could not be initialized!')
		print('Exception message: ' + str(e))
		exit(1)
		
	root = tk.Tk()
	app = mainWindow(root)
	root.mainloop()
